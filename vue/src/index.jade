doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Slides

    link(rel='stylesheet', type='text/css', href='build/build.css')
    link(rel='icon' type='image/png' href='../common/posvaicon.png')
    link(href='http://fonts.googleapis.com/css?family=Open+Sans:300,600' rel='stylesheet' type='text/css')
    link(href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600|Source+Code+Pro|Dosis:300,500' rel='stylesheet' type='text/css')

  body

    include ../../utils/utils.jade

    article
      section
        h1.thin.no-padding
          img.block.center(src='images/vue-logo.png')
          span Vue.js
        h2 Data-reactive web components
        .notes
          Librarie pour faire des interfaces web reactives oriente web components

      +full('manufacturing.gif')
        h1 Un autre MVVM ?!
        .notes
          Tres souvent la premiere reaction des gens quand je leur parle de Vue
          est 'Un autre MVVM' et il fait quoi de mieux

      section
        h2 Vue aujourd'hui
        ul.no-bullet
          li Version stable: 0.12
          li Version 1.0 en route
          li Version Alpha et Beta disponible
        .notes.
          La version alpha est faite pour faire la transition car elle affiche
          des warning de fontionnalités qui sont deprecated tandis que la beta
          est une pre release de la v1

      section
        h2 Pourquoi Vue ?
        ul.bullet
          li Equilibre Performance – Usabilité
          li Orienté Components
          li Communauté très active !
        .notes.
          Il est difficile de faire quelquechose d'efficace mais qui soit pratique à utiliser
          C'est le cas de react. Angular 1 est à l'opposé
          Issues crées tous les jours (un peu moins les we) et tout le monde qui répond
          chat Gitter pour discuter ou demander de l'aide
          Documentation solide

      section
        h2 Hello World
        .row.flex-align-center
          .even
            pre
              code.language-markup.
                &lt;div id="hello-world"&gt;
                  &lt;input v-model="value" type="text"/&gt;
                  &lt;p&gt;{{value}}&lt;/p&gt;
                &lt;/div&gt;
            pre
              code.language-javascript.
                new Vue({
                  el: '#hello-world',
                  data: {
                    value: 'Hello World'
                  }
                });
          .even.row.flex-align-center
            #hello-world
              input(v-model='value' type='text')
              p {{value}}

      +full('vocabulary.gif')
        h1 Le Vocabulaire
        .notes.
          Anvant de rentrer un peu plus dans les details de vue on va parler des
          principaux termes utilisés. Il y en a pas beaucoup :D

      section
        h2 Les Directives
        ul.no-bullet
          li
            code v-model
            span ,&nbsp;
            code v-if
            span , ...
          li Custom directives
            small (ne commencent pas forcemment par v-)
        span.bullet
        pre.bullet
          code.language-markup.
            &lt;input v-model="value" type="text"/&gt;
        .notes.
          Tous les v- et les custom directives sont des directives
          v-model est une directive mais type non
          les directives sont toujours reactive. Cad qu'elles évaluent une expression

      section
        h2 Le View Model (
          code vm
          span )
        p View ⇆ Model
        span.bullet
        pre.bullet
          code.language-javascript.
            new Vue({...});
        .notes.
          Le vm se charge de sync les données avec la vue
          La vm est crée quand on instancie une Vue

      section
        h2 Les filtres
        pre
          code.language-markup.
            &lt;p&gt;{{msg | capitalize}}&lt;/p&gt;
        .notes.
          surement connu ils permettent de changer les données avant qu'elles
          soient passées à la view

      +full('spider-fight.gif')
        h1 Fontionnalités classiques
        .notes les impasses, mais avant on va parler des concepts de base de vue

      section
        h2 Le&nbsp;
          code v-show
          span /
          code v-if
        .row
          .even
            pre.no-line-number(data-line='6')
              code.language-markup.
                &lt;div id="v-show"&gt;
                  &lt;input v-model="show" type="checkbox"/&gt;
                  &lt;span&gt;
                    {{show ? 'Hide the bear' : 'Show the bear'}}
                  &lt;/span&gt;
                  &lt;img v-show="show" src="images/bear-hello.gif"/&gt;
                &lt;/div&gt;
            pre
              code.language-javascript.
                new Vue({
                  el: '#v-show',
                  data: {
                    show: false
                  }
                });
          .even
            #v-show
              .block
                input(v-model='show' type='checkbox' id='v-show-check')
                label(v-bind:style='{fontSize: show? "1em" : "2em"}' for='v-show-check') {{show ? 'Hide the bear' : 'Show the bear'}}
              img(v-show='show' src='images/bear-hello.gif')

      section
        h2 Le&nbsp;
          code v-for
        .row
          .even
            pre(data-line='3')
              code.language-markup.
                &lt;div id="v-for"&gt;
                  &lt;ul&gt;
                    &lt;li v-for="item in items"&gt;{{item}}&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
            pre
              code.language-javascript.
                new Vue({
                  el: '#v-for',
                  data: {
                    items: [0, 1]
                  }
                });
          .even
            #v-for
              p There are {{items.length}} elements
              button(@click='items.push(items.length)') Push
              button(@click='items.pop()') Pop
              ul.row.flex-flow-wrap.flex-justify-start
                li(v-for='item in items') {{item}}

      section
        h2 Le&nbsp;
          code v-transition
        .row
          .even
            pre
              code.language-markup.
                &lt;div v-if="show" transition="expand"&gt;
                  &lt;img src="images/bear-hello.gif"/&gt;
                &lt;/div&gt;
            pre
              code.language-css.
                .expand-transition {
                  transition: all .3s ease;
                  height: 220px
                  overflow: hidden;
                }
                .expand-enter, .expand-leave {
                  height: 0;
                  opacity: 0;
                }
          .even
            #v-transition
              .block
                input(v-model='show' type='checkbox' id='v-transition-check')
                label(for='v-transition-check') {{show ? 'Hide the bear' : 'Show the bear'}}
              div(transition="expand" v-if='show')
                img(src='images/bear-hello.gif')

      section
        h2 Les filtres
        .row.flex-align-center
          .even
            pre
              code.language-markup.
                &lt;div id="filters"&gt;
                  &lt;p&gt;{{obj | json}}&lt;/p&gt;
                &lt;/div&gt;
            pre
              code.language-javascript.
                new Vue({
                  el: '#filters',
                  data: {
                    obj: {
                      bool: true,
                      arr: [1, 2],
                      inner: {
                        a: null
                      }
                    }
                  }
                });
          .even
            #filters
              p {{obj | json}}
        .notes.
          quand on veut modifier les données avant de les afficher
          on peut les chainer les un à la suite des autres
          On peut passer des argument
          et on peut bien sur creer ses propres filtres

      +full('over.gif')
        h1 C'est tout ?
        ul.bullet
          li
            a(href='https://github.com/vuejs/vue-router') vue-router
          li
            a(href='https://github.com/vuejs/vue-resource') vue-resource
          li
            a(href='https://github.com/vuejs/vue-validator') vue-validator
        .notes.
          Il manque bien sur plein de trucs. c'est pour ca que lon utilise des plugins.
          On evite de construire une usine a gaz

      +full('conventions.gif')
       h1 Les Conventions
       .notes.
        elles sont la pour faire que le dev n'ai pas a se poser de questions
        lorsqu'il doit écrire du code.
        réactif = prend une expression

      section
        h2 Directives réactives
        pre
          code.language-markup.
            &lt;a v-link.literal="/foo"&gt;Go to foo&lt;/a&gt;

      section
        h2 Attributs non réactifs
        pre.bullet
          code.language-markup.
            &lt;img v-bind:src="user.picture"/&gt;
            &lt;img :src="user.picture"/&gt;
        pre.bullet
          code.language-markup.
            &lt;contact-card :contact="user"&gt;&lt;/contact-card&gt;
        .notes.
          vue sait que c'est un lien et qu'il faut faire une requete

      section
        h2 Mustache Binding
        p Que dans les noeuds ou les attributs natifs
        pre
          code.language-markup.
            &lt;img src="{{imgUrl}}"/&gt;

      section
        h2 Les Events
        pre
          code.language-markup.
            &lt;input v-on:change="handle()"/&gt;
            &lt;input @change="handle()"/&gt;
        .notes.
          TODO parler den @change

      +full('playstation.gif')
        h1 Component System

      section
        h2 Les Avantages
        ul.bullet
          li DRY
            small (Don't repeat yourself)
          li Meilleure Structuration
          li Relecture Facile
        .notes.
          j'ai parlé tout à l'heure des components comme un avantage. mais pourquoi
          ça incite la refacto car on peut bien commencer par un component qui contient tout
          Puis au fur et a mesure que l'appli avance on se rend compte que certain composants
          peuvent etre reutilisés

      section.more-space
        h2 Tout dans une seule page
        pre
          code.language-markup.
            &lt;div id="contacts"&gt;
              &lt;form id="contacts-search" action="fetchResults"&gt;
                &lt;input v-model="search" type="text"/&gt;
                &lt;button type="submit"&gt;Search&lt;/button&gt;
              &lt;/form&gt;
              &lt;div id="contacts-results" class="contacts-grid"&gt;
                &lt;div class="contacts-card row" v-for="contacts"&gt;
                  &lt;img v-bind:src="imgUrl" class="contacts-img col-4"/&gt;
                  &lt;div class="contacts-info"&gt;
                    &lt;span&gt;{{firtsName}} {{lastName}}&lt;/span&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;

      section
        h2 Components search et contact-list
        pre.no-line-number(data-line='2,3,5')
          code.language-markup.
            &lt;div id="contacts"&gt;
              &lt;search id="contacts-search" action="fetchResults"&gt;&lt;/search&gt;
              &lt;contact-list id="contacts-results"
                v-bind:contacts="contacts"&gt;
              &lt;/contact-list&gt;
            &lt;/div&gt;
        .notes
          On garde encore certains liens de données dans la vue pricipale

      section
        h2 Componentception:&nbsp;
          code contact-list
        pre(data-line='2')
          code.language-markup.
            &lt;div class="contacts-contact-grid"&gt;
                &lt;contact-card v-for="contacts" contact="$value"&gt;&lt;/contact-card&gt;
            &lt;/div&gt;

      section
        h1 Le format&nbsp;
          code .vue

      +full('flamingo-hello.gif')
        h2 Happy Talk!
        .notes.
          Ca sera tout pour cette intro a vuejs. J'espere avoir attire l'attention
          vers ce framework et si c'est le cas je vous conseille de le tester et
          d'aller voir les ressources

    script(src='https://rawgit.com/yyx990803/vue/1.0.0-beta/dist/vue.min.js')
    script(src='build/build.js')
